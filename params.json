{
  "name": "CompareXML",
  "tagline": "CompareXML is a fast, lightweight and feature-rich tool that will solve your XML/HTML comparison or diffing needs. its purpose is to compare two instances of Nokogiri::XML::Node or Nokogiri::XML::NodeSet for equality or equivalency.",
  "body": "# CompareXML\r\n\r\n[![Gem Version](https://badge.fury.io/rb/compare-xml.svg)](https://rubygems.org/gems/compare-xml)\r\n\r\nCompareXML is a fast, lightweight and feature-rich tool that will solve your XML/HTML comparison or diffing needs. its purpose is to compare two instances of `Nokogiri::XML::Node` or `Nokogiri::XML::NodeSet` for equality or equivalency.\r\n\r\n**Features**\r\n\r\n - Fast, light-weight and highly customizable\r\n - Compares XML/HTML documents and document fragments\r\n - Can produce both detailed diffing discrepancies or execute silently\r\n - Has the ability to exclude specific nodes or attributes from all comparisons\r\n\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'compare-xml'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install compare-xml\r\n\r\n\r\n\r\n## Usage\r\n\r\nUsing CompareXML is as simple as\r\n\r\n```ruby\r\nCompareXML.equivalent?(doc1, doc2)\r\n```\r\n\r\nwhere `doc1` and `doc2` are instances of `Nokogiri::XML::Node` or `Nokogiri::XML::NodeSet`.\r\n\r\n**Example**\r\n\r\nSuppose you have two files `1.html` and `2.html` that you would like to compare. You could do it as follows:\r\n\r\n```ruby\r\ndoc1 = Nokogiri::HTML(open('1.html'))\r\ndoc2 = Nokogiri::HTML(open('2.html'))\r\nputs CompareXML.equivalent?(doc1, doc2)\r\n```\r\n\r\nThe above code will print `true` or `false` depending on the result of the comparison.\r\n\r\n> If you are using CompareXML in a script, then you need to require it manually with:\r\n\r\n```ruby\r\nrequire 'compare-xml'\r\n```\r\n\r\n\r\n## Options at a Glance\r\n\r\nCompareXML has a variety of options that can be invoked as an optional argument, e.g.:\r\n\r\n```ruby\r\nCompareXML.equivalent?(doc1, doc2, {ignore_comments: false, verbose: true, ...})\r\n```\r\n\r\n- `collapse_whitespace: {true|false}` default: **`true`**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#collapse_whitespace)\r\n    - when `true`, trims and collapses whitespace\r\n\r\n- `ignore_attr_order: {true|false}` default: **`true`**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#ignore_attr_order)\r\n    - when `true`, ignores attribute order within tags\r\n\r\n- `ignore_attr_content: [string1, string2, ...]` default: **`[]`**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#ignore_attr_content)\r\n    - when provided, ignores all attributes that contain substrings `string`, `string2`, etc.\r\n\r\n- `ignore_attrs: [css_selector1, css_selector1, ...]` default: **`[]`**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#ignore_attrs)\r\n    - when provided, ignores specific *attributes* using [CSS selectors](http://www.w3schools.com/cssref/css_selectors.asp)\r\n\r\n- `ignore_comments: {true|false}` default: **`true`**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#ignore_comments)\r\n    - when `true`, ignores comments, such as `<!-- comment -->`\r\n\r\n- `ignore_nodes: [css_selector1, css_selector1, ...]` default: **`[]`** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#ignore_nodes)\r\n    - when provided, ignores specific *nodes* using [CSS selectors](http://www.w3schools.com/cssref/css_selectors.asp)\r\n\r\n- `ignore_text_nodes: {true|false}` default: **`false`**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#ignore_text_nodes)\r\n    - when `true`, ignores all text content within a document\r\n\r\n- `verbose: {true|false}` default: **`false`**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[⇒ read more ⇐](#verbose)\r\n    - when `true`, instead of a boolean, `CompareXML.equivalent?` returns an array of discrepancies.\r\n\r\n\r\n## Options in Depth\r\n\r\n- <a id=\"collapse_whitespace\"></a>`collapse_whitespace: {true|false}` default: **`true`**\r\n\r\n    When `true`, all text content within the document is trimmed (i.e. space removed from left and right) and whitespace is collapsed (i.e. tabs, new lines, multiple whitespace characters are replaced by a single whitespace).\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {collapse_whitespace: true})`\r\n\r\n    **Example:** When `true` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\">   SOME TEXT CONTENT   </a>\r\n        <a href=\"/index\"> SOME    TEXT    CONTENT </a>\r\n\r\n    **Example:** When `true` the following HTML strings are considered equal:\r\n\r\n        <html>\r\n            <title>\r\n                This is my title\r\n            </title>\r\n        </html>\r\n\r\n        <html><title>This is my title</title></html>\r\n\r\n\r\n----------\r\n\r\n\r\n- <a id=\"ignore_attr_order\"></a>`ignore_attr_order: {true|false}` default: **`true`**\r\n\r\n    When `true`, all attributes are sorted before comparison and only attributes of the same type are compared.\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {ignore_attr_order: true})`\r\n\r\n    **Example:** When `true` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\" class=\"button\" target=\"_blank\">Link</a>\r\n        <a class=\"button\" target=\"_blank\" href=\"/admin\">Link</a>\r\n\r\n    **Example:** When `false` the above HTML strings are compared as follows:\r\n\r\n        href=\"admin\" != class=\"button\r\n\r\n    The comparison of the `<a>` element will stop at this point, since a discrepancy is found.\r\n\r\n    **Example:** When `true` the following HTML strings are compared as follows:\r\n\r\n        <a href=\"/admin\" class=\"button\" target=\"_blank\">Link</a>\r\n        <a class=\"button\" target=\"_blank\" href=\"/admin\" rel=\"nofollow\">Link</a>\r\n\r\n        class=\"button\"  == class=\"button\"\r\n        href=\"/admin\"   == href=\"/admin\"\r\n                        =! rel=\"nofollow\"\r\n        target=\"_blank\" == target=\"_blank\"\r\n\r\n\r\n----------\r\n\r\n\r\n- <a id=\"ignore_attr_content\"></a>`ignore_attr_content: [string1, string2, ...]` default: **`[]`**\r\n\r\n    When provided, ignores all **attributes** that contain any of the given substrings. **Note:** types of attributes still have to match (i.e. `<p>` = `<p>`, `<div>` = `<div>`,  etc).\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {ignore_attr_content: ['button']})`\r\n\r\n    **Example:** With `ignore_attr_content: ['button']` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\" id=\"button_1\" class=\"blue button\">Link</a>\r\n        <a href=\"/admin\" id=\"button_2\" class=\"info button\">Link</a>\r\n\r\n    **Example:** With `ignore_attr_content: ['menu']` the following HTML strings are considered equal:\r\n\r\n        <a class=\"menu left\" data-scope=\"abrth$menu\" role=\"side-menu\">Link</a>\r\n        <a class=\"main menu\" data-scope=\"ergeh$menu\" role=\"main-menu\">Link</a>\r\n\r\n\r\n----------\r\n\r\n\r\n- <a id=\"ignore_attrs\"></a>`ignore_attrs: [css_selector1, css_selector1, ...]` default: **`[]`**\r\n\r\n    When provided, ignores all **attributes** that satisfy a particular rule using [CSS selectors](http://www.w3schools.com/cssref/css_selectors.asp).\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {ignore_attrs: ['a[rel=\"nofollow\"]', 'input[type=\"hidden\"']})`\r\n\r\n    **Example:** With `ignore_attrs: ['a[rel=\"nofollow\"]', 'a[target]']` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\" class=\"button\" target=\"_blank\">Link</a>\r\n        <a href=\"/admin\" class=\"button\" target=\"_self\" rel=\"nofollow\">Link</a>\r\n\r\n     **Example:** With `ignore_attrs: ['a[href^=\"http\"]', 'a[class*=\"button\"]']` the following HTML strings are considered equal:\r\n\r\n        <a href=\"http://google.ca\" class=\"primary button\">Link</a>\r\n        <a href=\"https://google.com\" class=\"primary button rounded\">Link</a>\r\n\r\n\r\n----------\r\n\r\n\r\n- <a id=\"ignore_comments\"></a>`ignore_comments: {true|false}` default: **`true`**\r\n\r\n    When `true`, ignores comments, such as `<!-- This is a comment -->`.\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {ignore_comments: true})`\r\n\r\n    **Example:** When `true` the following HTML strings are considered equal:\r\n\r\n        <!-- This is a comment -->\r\n        <!-- This is another comment -->\r\n\r\n    **Example:** When `true` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\"><!-- This is a comment -->Link</a>\r\n        <a href=\"/admin\">Link</a>\r\n\r\n\r\n----------\r\n\r\n\r\n- <a id=\"ignore_nodes\"></a>`ignore_nodes: [css_selector1, css_selector1, ...]` default: **`[]`**\r\n\r\n    When provided, ignores all **nodes** that satisfy a particular rule using [CSS selectors](http://www.w3schools.com/cssref/css_selectors.asp).\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {ignore_nodes: ['script', 'object']})`\r\n\r\n    **Example:** With `ignore_nodes: ['a[rel=\"nofollow\"]', 'a[target]']` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\" class=\"icon\" target=\"_blank\">Link 1</a>\r\n        <a href=\"/index\" class=\"button\" target=\"_self\" rel=\"nofollow\">Link 2</a>\r\n\r\n     **Example:** With `ignore_nodes: ['b', 'i']` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\"><i class\"icon bulb\"></i><b>Warning:</b> Link</a>\r\n        <a href=\"/admin\"><i class\"icon info\"></i><b>Message:</b> Link</a>\r\n\r\n\r\n----------\r\n\r\n\r\n- <a id=\"ignore_text_nodes\"></a>`ignore_text_nodes: {true|false}` default: **`false`**\r\n\r\n    When `true`, ignores all text content. Text content is anything that is included between an opening and a closing tag, e.g. `<tag>THIS IS TEXT CONTENT</tag>`.\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {ignore_text_nodes: true})`\r\n\r\n    **Example:** When `true` the following HTML strings are considered equal:\r\n\r\n        <a href=\"/admin\">SOME TEXT CONTENT</a>\r\n        <a href=\"/admin\">DIFFERENT TEXT CONTENT</a>\r\n\r\n    **Example:** When `true` the following HTML strings are considered equal:\r\n\r\n        <i class=\"icon></i>  <b>Warning:</b>\r\n        <i class=\"icon>  </i>    <b>Message:</b>\r\n\r\n\r\n----------\r\n\r\n\r\n- <a id=\"verbose\"></a>`verbose: {true|false}` default: **`false`**\r\n\r\n    When `true`, instead of returning a boolean value  `CompareXML.equivalent?` returns an array of all errors encountered when performing a comparison.\r\n\r\n    > **Warning:** When `true`, the comparison takes longer! Not only because more processing is required to produce meaningful differences, but also because in this mode, comparison does **NOT** stop when a first difference is encountered, because the goal is to capture as many differences as possible.\r\n\r\n    **Usage Example:** `CompareXML.equivalent?(doc1, doc2, {verbose: true})`\r\n\r\n    **Example:** When `true` given the following HTML strings:\r\n\r\n    ![diffing](https://github.com/vkononov/compare-xml/raw/master/img/diffing.png)\r\n\r\n    `CompareXML.equivalent?(doc1, doc2, {verbose: true})` will produce an array shown below.\r\n\r\n    ```ruby\r\n    [\r\n        {\r\n            node1: '<title>TITLE</title>',\r\n            node2: '<title>ANOTHER TITLE</title>',\r\n            diff1: 'TITLE',\r\n            diff2: 'ANOTHER TITLE',\r\n        },\r\n        {\r\n            node1: '<h1>SOME HEADING</h1>',\r\n            node2: '<h1 id=\"main\">SOME HEADING</h1>',\r\n            diff1: nil,\r\n            diff2: 'id=\"main\"',\r\n        },\r\n        {\r\n            node1: '<a href=\"/admin\" rel=\"icon\">Link</a>',\r\n            node2: '<a rel=\"button\" href=\"/admin\">Link</a>',\r\n            diff1: '\"rel=\"icon\"',\r\n            diff2: '\"rel=\"button\"',\r\n        },\r\n        {\r\n            node1: '<cite>Author Name</cite>',\r\n            node2: nil,\r\n            diff1: '<cite>Author Name</cite>',\r\n            diff2: nil,\r\n        },\r\n        {\r\n            node1: '<p class=\"footer\">FOOTER</p>',\r\n            node2: '<div class=\"footer\">FOOTER</div>',\r\n            diff1: 'p',\r\n            diff2: 'div',\r\n        }\r\n    ]\r\n    ```\r\n\r\n    The structure of each hash inside the array is:\r\n\r\n        node1: [Nokogiri::XML::Node] left node that contains the difference\r\n        node2: [Nokogiri::XML::Node] right node that contains the difference\r\n        diff1: [Nokogiri::XML::Node|String] left difference\r\n        diff2: [Nokogiri::XML::Node|String] right difference\r\n\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n\r\n\r\n## Credits\r\n\r\nThis gem was inspired by [Michael B. Klein](https://github.com/mbklein)'s gem [`equivalent-xml`](https://github.com/mbklein/equivalent-xml) - another excellent tool for XML comparison.\r\n\r\n\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}